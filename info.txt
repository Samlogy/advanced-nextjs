Error handling page:
    create a custom page --> ex: 404.tsx, 500.tsx, ...
    add custom error page --> _error.tsx 

Middleware: run the code before is the request completed using:
    conditionning statement:
    matcher: url, url list

Internationalized routing: switch language with router 
    ex: .../fr/blog --> .../en/blog

react 18 features: we can use all react 18 new features along side nextjs

build-in:
    link - 
    image - 
    router - 
    script (execute script --> internal / external)
    head --> add additional headers (seo purpose, ...)

Rendering (Nextjs):
    CSR: same as react --> useffect, ...
    SSR: data is loaded from the server
    SSG: page is generated on build time on server, immediately display to user
    ISR: same as SSG attempt to re-generate the page every "certain interval of time in seconds"


Environment variable: 
    .env.local --> call this way (process.env.VARIABLE_NAME)

Eslint: yarn lint --> linting code / verify linting warings & errors

Debouncing: used for optimizing the performance. 
            It is done by limiting the rate of execution of a particular function 
            (also known as rate limiting).
            ex: avoid rendenring every time we update a state

Throttling: is same as debounce --> limiting the rate of execution of function.
    ex: avoid multiple click on button that triggers the same function

NB: throttling & debouncing improve code optimization

Portals: The Portal's most common use cases are when the child components need to visually break out of the parent container
    ex: Modal - notification - toast - alerts - tooltips - loaders - ...

HOC: Higher Order Component --> a fct that calls another fct which can be used for create a cpt / condition rendering

ForwardRef: its a ref that is passed to child cpt from parent cpt the child cpt must wrapped
    ex: React.forwardRef(component)

Perfomence: (Increase)
    fonts locally --> download & load them locally
    do not download unnecessary assets
    minifying css & js
    using CDN
    using code splitting
    use cache
    remove unused code
    lazy loading videos
    images: (use the right format)
        jpeg & jpg (the same) --> Photos and artwork.
        png > jpeg -->  illustrations and images (not piwelled like jpeg).
        svg (small size, scaled, animated) -->  Illustrations, logos, and icons.
        WebP > jpeg, png --> Photos, illustrations, etc.
        GIF (animated images) --> bigger size (use video instead)

        compress images to reduce size / redundancy
        responsive images according device size
        lazy load images
        scale down images to resonable size (according to website size)

Scale web app:
    *single server setup: (every web app/cache/DB is running on a single server)
        we can handle user's request a certain limiting point due to limiting ressources
        if server goes down the whole app is going down

    *Vertical Scaling vs Horizontal Scaling: 
        *vertical: (scale-up) -> we add more CPU /RAM for our servers
            pros: great for low traffic
            cons: doesn't support any failover- can't add unlimited CPU/RAM + costly
        *Horizontal: (scale-out) -> we add more servers to the pool
            pros: better for handling large amount of user's request
            
            NB: we add load balancer: it job is handle the traffic using different algorithms (Round Robin, ...), easy to scale (add more server into the pool)

            Database Replication: is used to scale database application using master-slave system. Here, master is our main database for that server and slaves are copies of the main database. 
            we use Master (create/update/delete operations), and the slaves for read (which much higher than any other operation)

            NB: 
                *otherwise when it reaches its load limit or fails for any reason our system can go down entirely
                *greater performences
                *reliability: if any accident occures our data is occied into multiple locations 
                             if master goes down: a slave take it place temporary runs recovery script (update-to-date)
                             if slave goes down: all read operations will be transffered to another DB

Tips:
    call for experience / help of more experienced ones in the field
    test code
    use documentation
    automate things when u can (increase productivity)
    learn about algorithms / data structures / computer science basics
    collaborate with people
    keep learnings


REST API:
    use patch over put (
        patch: partial update
        put: full update
    )
    endpoint naming
    standardization of response / error object
    add error / success message
    add HTTP status code
    each endpoint takes care of one single action & do it well (create services single action, do it well, and can be reusable)
    provide API documentation (
        endpoints available, and their purpose
        permission required to execute an endpoint
        example of endpoint invocation (response)
        error message to expect
    )
    use SSL / configure CORS
    version the API
    use cache --> performence
    Use standard UTC dates --> new Date().date.toISOString()
    add health check endpoint --> GET /health
    
Mobile Apps:
	mobile dev is process that involves creating apps for multiple devices such as: smartphones, tablet, ...
	the process involves the conception, planning, design, development, and testing of the app.
	
	Types:
	Native apps:
		developed specifically for one type of mobile operating system: iOS or Android. Native apps are written in the language that’s native to the operating system, such as Objective-C or Swift for iOS apps, and Java or Kotlin for Android apps.
	pros: 
		take full advantage of the device ressources of the mobile(camera, ...)
		better user experience
	cons: 
		expensive to develop & required to develop an app for each operating system
		require more time to develop due to operating system set of rules
		more difficul to develop due to each operating system updating process
		
			
	Hybrid:
		developped using web technologies (html, css, js) or native technologies (objective-c,...), for hybrid dev we use framework (react native, ionic, cordova, ...)
	pros:
		less time & money, easier to develop
		take advantages od each plateform features
		can be downloaded in app / apple stores
		can be designed to work on multiple types of mobile devices (smartphones, ...)
	cons:
		less reliable than native apps
		more difficult to update because they need to be compatible with multiple types of operating systems.
		less responsive (less UX) than native apps
		less performent than native apps
		
	Web Apps:
		A web app is an app that’s developed using web technologies (HTML, CSS, and JavaScript). They are usually developed using a framework (Angular, React, or Vue).
	pros: 
		great experience (UX) when it comes to using web app in brower in comparaison with traditional website.
	cons: 
		less responsive than hybrid apps
		
	
	Hybrid vs Native vs Web Apps:
		Native: are great when it comes to performences, UX and reliabilty
		Hybrid: cheaper, faster, UX and performences are decent enough, available in app stores, develop multiple OS / devices with one single source code.
		Web: can be updated easily compared to other types, designed on multiple devices, and plateforms.
	NB:
		Native: are a better choice for: apps that require performences, established companies business, large funds, ...
		Hybrid: are better choice for: companies that want to release a mobile app, medium / small funds, performences / reliabilty is not an important criterias.
		Web: are better choice for: thoes want to provide great quality app and experience (UX) on browser in comparaison to websites, easies to update, adapt, and companies from small, to large scale, can improve a company web presence more than any mobile since it's available in web. 
		
		
		
		
REST vs GraphQL vs RCP
    graph: 
        pros:
            Adaptability — the client decides what data they want, how they want it and what format they want to get it in,
            Efficiency — delivers exactly what the client requests without over fetching,
            Flexibility — GraphQl is cross-platform and supports more than a dozen languages (Perl, Java, Python, PHP among others).

        cons: 
            caching problems (spcially HTTP)
    REST: 
        pros: 
            Performance — best suited for systems requiring rapid iteration and HTTP standardized verbiage,
            Scalability — allows the support of large numbers of components and interactions among them,
            Simplicity — REST has a uniform interface which simplifies and decouples the architecture,
            Modifiability — components can be modified to fit changing needs even while the application is running.

        cons: 
            receive targe payload (more data than necesary needed)
            sometimes you need multiple round to send data to different endpoint

    gRCP: 
        pros:
            lightweight — , requires very little resources which makes it a handy solution for even extremely low powered situations
            efficient — , gPRC uses protobufs, a method of serializing structured data which focuses on serializing communication in an effective manner
            open-source —  and can be freely used, modified or forked
          
Programming paradigm:
	are a way to classify programming languages on their features.
	each paradigm consists of a certain structures, features, and opinions about how common programming problems should be tackled.
	
	NB:
	  Some programming paradigm can be subdivisions of other programming paradigm.
	
	Functional Programming:
		paradigm programs are constructed by applying and composing functions. Here functions are treated as first-class citizens, meaning that they can be assigned to variables, passed as arguments, and returned from other functions, just as any other data type can.
		pros: 
			uses immutable data, and as the focus on input/output element.
			programming statements can be executed in any order
			less complex
			elements used: variables, functions
	
	Object Oriented Programming:
		separate concerns into entities which are coded as objects, and classes that building block to create these objects.
		pros:
			very structured --> classes, objects, methods
			programming statements can be executed in a specific order
		cons:
			more complex
			use mutable data --> data structure (can be changed)

    useTransition vs useDefferedValue:
        useTransition: seTransition: used specially for slow devices (the code is more responsive, less laggy)
        startTransition: wraps a function responsile for this behaviour (ex: filtering in our case)
        isPending: boolean value that tells us some state updates that are still pending (hasn't been yet by react) --> so we can show some fallback in the UI.

        useDefferedValue: allows to fix slow renders problems by implementing a delay similar(throttling, debouncing)

        differences:
            do not use both at the same time since they basiccaly do the same things
            useTransition: wraps the state updating code
            useDefferedValue: wraps the value affected by the state change
            if i have access state updating code + have state updates (have to be treated in lower priority) --> useTransition
            else (i do not have access to that) --> useDefferedValue
            do not wrap all the code, use other performance enhancements (pagination, lazy loading, worker threads, back-end, ...)
    
    useMemo vs useCallback:
        they are both used for optimization since it uses memoizing operation
        callback: returns a function which is referentially equal between renders
        memo: calculte & returns value which referentially equal between renders
        referential equal: values are equal a do not trigger a re-render --> great form optimization

        differences:
            memo calculate & returns the value
            callback do not call it save it for later uses
            memo: returns a value
            callback: return a function that can executed with an assigned value

            if i want to memoize a function save for later & do it call right away --> callback
            if i want to memoize a value (from a calculated function) --> memo 